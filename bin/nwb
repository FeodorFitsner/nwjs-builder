#!/usr/bin/env node --harmony-destructuring --harmony-rest-parameters

'use strict';

const { spawn } = require('child_process');

const commander = require('commander');

const Flow = require('node-flow');

const {
    GetVersionList, GetLatestVersion, GetStableVersion, DownloadBinary
} = require('nwjs-download');

const {
    GetExecutable, ExtractBinary
} = require('../');

const MatchNwBuilderVersion = (versions, nwBuilderVersion) => {

    for(let version of versions) {
        for(let flavor of version.flavors) {

            let pattern = version.version + (flavor == 'normal' ? '' : '-' + flavor);

            if('v' + nwBuilderVersion == pattern || nwBuilderVersion == pattern) {

                return [version, flavor];

            }

        }
    }

    return [null, null];

};

const ParseNwBuilderVersion = (nwBuilderVersion, callback) => {

    Flow(function*(cb) {

        // FIXME: commander has a method named "version" as well.
        if(nwBuilderVersion && typeof nwBuilderVersion == 'string') {

            let [err, versions] = yield GetVersionList((err, versions) => cb(err, versions));

            if(err) {
                return callback(err);
            }

            let [version, flavor] = MatchNwBuilderVersion(versions, nwBuilderVersion);

            if(!version) {

                console.error('ERROR_VERSION_NOT_FOUND');
                console.error('version:', nwBuilderVersion);
                console.error('versions:', versions.map((version) => version.version));

                return;

            }

            return callback(err, version.version, flavor);

        }
        else {

            let [err, version] = yield GetLatestVersion((err, version) => cb(err, version));

            if(err) {
                return callback(err);
            }

            return callback(err, version.version, null);

        }

    });

};

const LaunchExecutable = (executable, path, callback) => {

    const cp = spawn(executable, [path]);

    if(!cp) return callback('ERROR_LAUNCH_FAILED');

    cp.stdout.on('data', console.log);
    cp.stderr.on('data', console.error);

    cp.on('close', (code) => callback(null, code));

};

const NwBuilderBuild = (path, command) => {

    console.warn('WARN_UNDER_CONSTRUCTION');
    return;

};

const NwBuilderRun = (path, command) => {

    Flow(function*(cb) {

        const options = {
            version: null,
            platform: null,
            arch: null,
            flavor: null,
            path: null
        };

        // Parse platform and arch.

        options.platform = process.platform;
        options.arch = process.arch;

        // Parse version.

        var [err, version, flavor] = yield ParseNwBuilderVersion(command.version, (err, version, flavor) => cb(err, version, flavor));

        if(err) {
            console.error(err);
            return;
        }

        options.version = version;
        options.flavor = flavor;

        // Parse path.

        options.path = path ? path : '.';

        console.log(options);

        // Download nw.js.

        var [err, fromCache, binaryPath] = yield DownloadBinary({
            version: options.version,
            platform: options.platform,
            arch: options.arch,
            flavor: options.flavor
        }, (err, fromCache, path) => cb(err, fromCache, path));

        if(err) {
            console.error(err);
            return;
        }

        // Extract nw.js.

        var [err, extractPath] = yield ExtractBinary(binaryPath, (err, extractPath) => cb(err, extractPath));

        if(err) {
            console.error(err);
        }

        const executable = GetExecutable(extractPath, options.platform);

        var [err, code] = yield LaunchExecutable(executable, options.path, (err, code) => cb(err, code));

        if(err) {
            console.error(err);
            return;
        }

        console.log(`nw.js exits with code ${ code }.`);

    });

};

commander.version(require('../package.json').version);

commander.command('*')
.action(() => commander.help());

commander.command('nwbuild [path]')
.option('-v,--version <version>', 'The nw version, eg. 0.8.4')
.option('-p,--platforms <platforms>', 'Platforms to build, comma-sperated, can be: win32,win64,osx32,osx64,linux32,linux64')
.option('-r,--run', 'Runs NW.js for the current platform')
//.option('-o,--buildDir', 'The build folder')
//.option('-f,--forceDownload', 'Force download of NW.js')
//.option('--cacheDir', 'The cache folder')
//.option('--quiet', 'Disables logging')
.action((path, command) => {

    if(command.run) {

        NwBuilderRun(path, command);

    }
    else {

        NwBuilderBuild(path, command);

    }

});

if(process.argv.length <= 2) {
    commander.help();
}

commander.parse(process.argv);
